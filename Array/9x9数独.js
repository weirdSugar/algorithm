/**
 * 判断一个 9 x9 的数独是否有效。 

 数字 1 - 9 在每一行只能出现一次。
 数字 1 - 9 在每一列只能出现一次。
 数字 1 - 9 在每一个以粗实线分隔的 3 x3 宫内只能出现一次。

 数独部分空格内已填入了数字， 空白格用 '.'
 表示。

 示例 1:
     输入: [
         ["5", "3", ".", ".", "7", ".", ".", ".", "."],
         ["6", ".", ".", "1", "9", "5", ".", ".", "."],
         [".", "9", "8", ".", ".", ".", ".", "6", "."],
         ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
         ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
         ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
         [".", "6", ".", ".", ".", ".", "2", "8", "."],
         [".", ".", ".", "4", "1", "9", ".", ".", "5"],
         [".", ".", ".", ".", "8", ".", ".", "7", "9"]
     ]
 输出: true
 
 示例 2:
     输入: [
         [".", "3", ".", ".", "7", ".", ".", ".", "."],
         ["6", ".", "8", "1", "9", "5", ".", ".", "."],
         [".", "9", "8", ".", ".", ".", ".", "6", "."],
         ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
         ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
         ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
         [".", "6", ".", ".", ".", ".", "2", "8", "."],
         [".", ".", ".", "4", "1", "9", ".", ".", "5"],
         [".", ".", ".", ".", "8", ".", ".", "7", "9"]
     ]
 输出: false
 解释: 除了第一行的第一个数字从 5 改为 8 以外， 空格内其他数字均与 示例1 相同。
 但由于位于左上角的 3 x3 宫内有两个 8 存在, 因此这个数独是无效的。

 说明:
     给定数独永远是 9 x9 形式的。
 */


'use strict'
 /**
  * @param {character[][]} board
  * @return {boolean}
  */
 var isValidSudoku = function (board) {
     let row = [
             [],
             [],
             [],
             [],
             [],
             [],
             [],
             [],
             []
         ],
         col = [
             [],
             [],
             [],
             [],
             [],
             [],
             [],
             [],
             []
         ],
         grid = [
             [],
             [],
             [],
             [],
             [],
             [],
             [],
             [],
             []
         ],
         index = 0;
     for (let i = 0; i < 9; i++)
         for (let j = 0; j < 9; j++) {
             let num = board[i][j]
             if (num === '.') continue
             else {
                 if (row[i].indexOf(num) > -1) {
                     return false
                 } else {
                     row[i].push(num)
                 }

                 if (col[j].indexOf(num) > -1) {
                     return false
                 } else {
                     col[j].push(num)
                 }

                 index = Math.floor(i / 3) * 3 + Math.floor(j / 3)
                 if (grid[index].indexOf(num) > -1) {
                     return false
                 } else {
                     grid[index].push(num)
                 }
             }
         }
     return true
 };